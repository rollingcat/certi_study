BackTracking의 모든 것
Back Tracking 이란, 
현재 까지의 솔루션이 
1. "정답"인지
2. "오답"인지
3. 아직 정답여부를 확인할 수 없는지
위 사항을 지속적으로 체크하며 정답을 찾을 때까지 한 단계씩 나아가는 방법입니다.
만약 오답이라면 현재의 솔루션을 포기하고 다시 이전 단계로 돌아가서 다른 솔루션을 체크합니다. (Back tracking)

recursion 기반의 완전탐색을 이용하기 때문에 약간은 무식한 방법이기도 하지만, 
상황에 따라 적절히 사용한다면 여러분의 문제풀이 능력은 더욱 향상될 것입니다.

여러분은 이제 "String內 모든 문자순열 출력하기", "체스판의 나이트 이동", "N-Queen 문제" 등을 해결하며 Back Tracking 을 완벽하게 이해하게 될 것입니다.
Back Tracking 을 이해하고 구현하는 것은 이번 한 번이면 충분합니다.
Do not backtrack the backtracking!

-------------------------------------------------------------------------------------------
String內 모든 문자순열 출력하기 - 1
-------------------------------------------------------------------------------------------
Back Tracking 은 완전탐색을 이용합니다.

그리고 한 단계씩 나아가죠.

완전 탐색과 한 단계씩 전진이라고?

네! 맞습니다.

Back Tracking은 바로 재귀함수를 이용하여 손쉽게 구현할 수 있습니다.

 

String내의 모든 char 순열을 출력하는 함수를 구현하면서 Back Tracking 을 이해하도록 합시다.

String은 같거나 서로 다른 char의 순열로 생각할 수 있습니다.

서로 다른 문자로 구성된 고정길이 5인 string 이 input으로 주어질 것입니다.

ex) "ABCDE"

 

이 string의 모든 문자순열의 개수는 총 120가지(5 x 4 x 3 x 2 x 1)가 됩니다.

"CDEBA", "EDCBA", "ABCDE", 등 이 string의 문자순열이 됩니다.

이러한 모든 문자순열을 출력하는 함수를 구현해보도록 합시다.

이 함수는 인자인 index를 1씩 증가시켜 index가 N(즉 5)일 때까지 탐색을 계속 해나가는 재귀함수입니다.

index가 N일 때 (즉 마지막까지 탐색을 하였을 때) 문자순열을 출력하기 위해

printf("%s\n", input); 
대신

addString(input);
를 호출하도록 합니다.

이 함수 호출을 통해 여러분이 올바른 문자순열을 구했는지 main 에서 체크하게 됩니다.

 

<구현해야 할 함수 1>

void printPermutation(int index, char* input);
 

<인자>

index : 두 번째 인자인 input 문자열중 현 단계의 문자 index (1씩 증가시키며 재귀함수 호출)
input : 문자열
 

<input example>

1 //TC
ABCDE // 서로 다른 문자로 구성된 고정길이 5인 문자열
 

<위 예제에 대한 정답>

ABCDE
ABCED
ABDCE
...
 

<HINT>

swap 함수를 활용해보세요!

 

좀 더 자세한 사항은 main.cpp 를 읽고 분석해야 합니다.